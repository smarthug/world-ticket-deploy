{"version":3,"file":"static/js/209.61daf295.chunk.js","mappings":"uUAae,SAASA,EAAQ,GAA0B,IAAxBC,EAAK,EAALA,MAAOC,EAAY,EAAZA,aAmBrC,OACI,iCACI,SAACC,EAAA,EAAO,KACR,SAACC,EAAA,EAAO,KACR,UAACC,EAAA,EAAI,CACDC,YAAY,WACZC,QAAQ,aACRN,MAAOA,EACPO,SAAUN,EACV,aAAW,wBACXO,GAAI,CAAEC,YAAa,EAAGC,YAAa,WAAY,WAO/C,SAACC,EAAA,EAAG,CAACC,MAAM,SAASC,GAAG,UAAUC,UAAWC,EAAAA,MAC5C,SAACJ,EAAA,EAAG,CAACC,MAAM,YAAYC,GAAG,aAAaC,UAAWC,EAAAA,MAClD,SAACJ,EAAA,EAAG,CAACC,MAAM,QAAQC,GAAG,IAAIC,UAAWC,EAAAA,UAQrD,C,+EC7CMC,EAAc,IAWdC,EAAW,CAEf,OAAU,EACV,UAAa,EACb,GAAI,GAIS,SAASC,IAEtB,MAAoCC,EAAAA,UAAe,GAAM,eAAlDC,EAAU,KAAEC,EAAa,KAK5BC,GAHaC,EAAAA,EAAAA,MAGKC,SAASC,MAAM,KAIrC,EAA0BN,EAAAA,SAAeF,EAASK,EAAO,KAAI,eAAtDtB,EAAK,KAAE0B,EAAQ,KAEhBzB,EAAe,SAAC0B,EAAGC,GACvBF,EAASE,EACX,EAEMC,EAAqB,WACzBR,GAAeD,EACjB,EAEA,OACE,UAACU,EAAA,EAAG,YAIF,SAACC,EAAA,EACC,CACAvB,GAAI,CACFwB,MAAO,CAAEC,GAAG,eAAD,OAAiBjB,EAAW,QACvCkB,GAAI,CAAED,GAAG,GAAD,OAAKjB,EAAW,QACxB,UAEF,UAACd,EAAA,EAAO,YACN,SAACiC,EAAA,EAAU,CACTC,MAAM,UACN,aAAW,cACXC,KAAK,QACLC,QAAST,EACTrB,GAAI,CAAE+B,GAAI,EAAGC,QAAS,CAAEP,GAAI,SAAW,UAEvC,SAACQ,EAAA,EAAQ,OAKX,gBAAKC,IAAKC,EAAMC,IAAI,OAAOZ,MAAM,MAAMa,OAAO,QAC9C,SAACf,EAAA,EAAG,CAACtB,GAAI,CAAEsC,SAAU,MAIrB,SAAChB,EAAA,EAAG,CAACtB,GAAI,CAAEsC,SAAU,WAQzB,UAAChB,EAAA,EAAG,CACFhB,UAAU,MACVN,GAAI,CAAEwB,MAAO,CAAEC,GAAIjB,GAAe+B,WAAY,CAAEd,GAAI,IACpD,aAAW,kBAAiB,WAG5B,SAACe,EAAA,GACC,CACA1C,QAAQ,YACR2C,KAAM7B,EACN8B,QAASrB,EACTsB,WAAY,CACVC,aAAa,GAEf5C,GAAI,CACFgC,QAAS,CAAEa,GAAI,QAASpB,GAAI,QAC5B,qBAAsB,CAAEqB,UAAW,aAActB,MAAOhB,IACxD,UAEF,SAACjB,EAAO,CAACC,MAAOA,EAAOC,aAAcA,OAEvC,SAAC+C,EAAA,GAAM,CACL1C,QAAQ,YACRE,GAAI,CACFgC,QAAS,CAAEa,GAAI,OAAQpB,GAAI,SAC3B,qBAAsB,CAAEqB,UAAW,aAActB,MAAOhB,IAE1DiC,MAAI,YAEJ,SAAClD,EAAO,CAACC,MAAOA,EAAOC,aAAcA,WAK/C,C,eCrHe,SAASsD,EAAK,GAAe,IAAbC,EAAQ,EAARA,SAQ3B,OACI,SAAC1B,EAAA,EAAG,CACAhB,UAAU,OACVN,GAAI,CAAEsC,SAAU,EAAGW,UAAW,EAAGzB,MAAO,CAAEC,GAAG,eAAD,OAAiB,IAAG,SAEhEyB,MAAO,CAEHC,WAAY,mCACZd,OAAQ,SACV,UAEF,SAACe,EAAA,EAAS,CAACC,SAAS,KAAI,SAEnBL,KAKjB,CCnCQ,SAASM,IAGb,OAFAC,QAAQC,IAAI,sBAGR,0BACI,wBAAI,WAGhB,CCRO,SAASC,IACd,OACE,4BACE,wBAAI,SACJ,uBAAG,oBACH,uBAAG,gBAGT,C,8CCDMC,EAAS,IAAIC,EAAAA,GAAW,CAAEC,MAFhB,gPAgDT,SAAeC,EAAmB,GAAD,+BAoBvC,8CApBM,WAAkCC,GAAQ,gFAQyB,OANxEP,QAAQC,IAAIM,GAMNC,EAAO,IAAIC,EAAAA,GAAK,CAACC,KAAKC,UAAUJ,IAAY,CAAEK,KAAM,cAAe,EAAD,OACtDT,EAAOU,UAAUL,GAAM,KAAD,EAMxC,OANMM,EAAG,OACTd,QAAQC,IAAIa,GAKZ,SAEqBX,EAAOY,OAAOD,GAAI,OACpB,OADbC,EAAM,OACZf,QAAQC,IAAIc,GAAO,kBACZA,EAAOD,KAAG,6CAClB,sB,gypDCzDKE,EAAS,SAACJ,EAAMK,GAClB,OAAOC,EAAAA,gBAAAA,OAAW,CAACN,GAAOK,GAAe,EAC7C,EAuBO,SAASE,IAEZ,OAA6CC,EAAAA,EAAAA,MAA/BC,EAAM,EAAZC,KAEFC,GAFuB,EAAPC,QAAkB,EAATC,WAEfC,EAAAA,EAAAA,OAGhB1B,QAAQC,IAAI,sBACZ,OAA0C0B,EAAAA,EAAAA,UAAS,GAAE,eAA9CC,EAAa,KAAEC,EAAgB,KACtC,GAA0BF,EAAAA,EAAAA,UAAS,GAAE,eAA9BG,EAAK,KAAEC,EAAQ,KAEtB,GAAsCJ,EAAAA,EAAAA,UAAS,IAAG,eAA3CK,EAAW,KAAEC,EAAc,KAMlC,GAAsCN,EAAAA,EAAAA,UAAS,IAAG,eAA3BO,GAAF,KAAa,MAMP,aAoB1B,OApB0B,0BAA3B,6FASK,OARKC,EAAoB,CACtBC,KAAM,sBACNC,YAAa,yCACbC,MAAO,4HACPV,cAAeA,EACfE,MAAOA,EACPS,cAAe,YACfC,gBAAiB,YACpB,SACsBlC,EAAmB6B,GAAmB,KAAD,EAAtDM,EAAQ,OACRC,EAAQ,kBAAcD,EAAQ,yBAEpCzC,QAAQC,IAAI,oDAAqDyC,GAGjER,EAAYQ,GACZX,EAASY,KAAKC,MAAM,KAAYhB,IAEhCK,EAAeL,GAAc,4CAChC,sBAEuB,aA0BvB,OA1BuB,0BAAxB,WAAyBiB,GAAQ,0FAa0C,OAZvE7C,QAAQC,IAAI,WAAY4C,GAExB7C,QAAQC,IAAI,qBAEe,6CAErB6C,EAAsB,IAAIC,EAAAA,GAFL,6CAEyCC,EAAAA,IAAiB3B,GAE/E4B,EAAqBH,EAAoBI,QAAQ7B,GAEjD8B,EAAgBJ,EAAAA,EAAAA,OAAoC,CAAC,cAAeF,EAASO,OAAO,GACpFC,EAAoBrC,EAAO,UAAW6B,EAASS,aAC/CC,EAAuBvC,EAAO,UAAW6B,EAASW,gBAAe,UAE5CV,EAAoBW,YAAYC,KAAKnC,EAAQoC,QAASN,EAAmBE,EAAsBJ,EAAe5B,EAAQoC,SAAQ,QAChH,OADnCC,EAAY,OAClB5D,QAAQC,IAAI,eAAgB2D,GAAa,UAExBX,EAAmBS,KAAKnC,EAAQoC,QAASN,EAAmBE,EAAsBJ,EAAe5B,EAAQoC,QAAS,CAAEE,SAAU,YAAY,QAAnJ,OAAFC,EAAE,iBACSA,EAAGC,OAAM,QAApBC,EAAE,OAERhE,QAAQC,IAAI6D,GACZ9D,QAAQC,IAAI+D,GAAI,6CAInB,sBAED,OAGI,UAACC,EAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE,WACvB,SAACF,EAAA,GAAI,CAACG,MAAI,EAACC,GAAI,EAAG/E,GAAI,GAAG,UACrB,gBAAKrB,MAAO,IAAKa,OAAQ,IAAKH,IAAK2F,EAAOzF,IAAI,aAElD,SAACoF,EAAA,GAAI,CAACG,MAAI,EAACC,GAAI,EAAG/E,GAAI,GAAG,UAErB,iBAEIK,MAAO,CACH4E,QAAS,GACTC,OAAQ,IAGV,WAGF,wBAAI,oBACJ,SAACC,EAAA,EAAS,CACNC,GAAG,gBACH7H,MAAM,OACNN,QAAQ,WACRN,MAAO2F,EACPpF,SA/EC,SAACmI,GAClB9C,EAAiB8C,EAAMC,OAAO3I,MAClC,EA8EoBoC,MAAM,UACNwG,WAAS,KAEb,0BACI,iBACIlF,MAAO,CACHlB,QAAS,OACTqG,eAAgB,gBAChBpF,UAAW,IACb,WAEF,oBACA,SAACqF,EAAA,EAAM,CACHxI,QAAQ,YACR8B,MAAM,UACNE,QA7F1B,WAEyB,gCA4FC9B,GACI,CACIuI,WAAY,QAEnB,SACJ,gBAKT,wBAAI,uBACJ,SAAC5I,EAAA,EAAO,CAACG,QAAQ,YAEjB,iBACIoD,MAAO,CACHlB,QAAS,OACTqG,eAAgB,iBAElB,WAEF,0BAAI,OAAK9C,MACT,0BAAI,IAAEF,SAGV,SAAC1F,EAAA,EAAO,CAACG,QAAQ,YACjB,iBACIoD,MAAO,CACHlB,QAAS,OACTqG,eAAgB,gBAChBpF,UAAW,IACb,WAEF,oBACA,SAAC,KAAW,CACRuF,OAAO,+CACPC,OAAO,cACPC,QAAQC,EAAAA,EAAAA,IAAe,CAAC,WAAY,CAAC7D,EAAQoC,UAC7C0B,UA7GvB,SAEwB,GAAD,gCA4GAC,iBAAkB,CAAC,OAEnBC,iBAAe,WAEd,gBAAGrG,EAAI,EAAJA,KAAI,OAAO,SAAC6F,EAAA,EAAM,CAClBxI,QAAQ,YACR8B,MAAM,UACNE,QAASW,EACTzC,GACI,CACIuI,WAAY,QAEnB,SACJ,YAEQ,cAerC,CChOQ,SAASQ,IAGb,OAFAxF,QAAQC,IAAI,0BAGR,0BACI,wBAAI,eAGhB,CCDe,SAASwF,KAEHC,EAAAA,EAAAA,MAUjB,OACI,UAAC,KAAM,CAACC,MAAI,aAQR,SAAC,KAAK,CAACC,OAAK,EAACC,KAAI,UAAaC,SAAS,SAAC3E,EAAM,OAC9C,SAAC,KAAK,CAACyE,OAAK,EAACC,KAAI,aAAgBC,SAAS,SAACN,EAAS,OACpD,SAAC,KAAK,CAACI,OAAK,EAACC,KAAI,IAAOC,SAAS,SAAC/F,EAAK,OACvC,SAAC,KAAK,CAAC8F,KAAI,IAAOC,SAAS,SAAC5F,EAAQ,QAIhD,CCxBe,SAAS6F,IAIpB,OACI,UAAC,KAAU,YAEP,SAAC,EAAM,KACP,SAAC,EAAa,WAGN,SAACN,EAAQ,QAK7B,CHLAzF,QAAQC,IAAI+C,E","sources":["components/SideNav.js","components/AppBar.js","components/MainContainer.js","pages/about.js","pages/NotFound.js","utils/ipfsUpload.js","pages/ticket.js","pages/community.js","routes.js","router.js"],"sourcesContent":["\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport React from \"react\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport { Divider } from '@mui/material';\r\n\r\n// interface SideNavProps {\r\n//     value: number\r\n//     handleChange: (_: React.SyntheticEvent, newValue: number) => void\r\n// }\r\n\r\nexport default function SideNav({ value, handleChange }) {\r\n\r\n    // const [value, setValue] = React.useState(0);\r\n\r\n    // const handleChange = (_, newValue) => {\r\n    //     setValue(newValue);\r\n    // };\r\n\r\n    // really stupid bug\r\n    // https://github.com/mui/material-ui/issues/32749\r\n    // useEffect(() => {\r\n    //     // setTimeout(()=>{\r\n    //     //     setValue(1)\r\n\r\n    //     // },4000)\r\n    //     setValue(value)\r\n    // }, [value])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Toolbar />\r\n            <Divider />\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                sx={{ borderRight: 1, borderColor: \"divider\" }}\r\n            >\r\n                {/* <Tab label=\"Create Collection\" to=\"/CreateCollection\" component={NavLink} /> */}\r\n                {/* <Tab label=\"Create NFT\" to=\"/CreateNFT\" component={NavLink} />\r\n                <Tab label=\"Manage NFT\" to=\"/ManageNFT\" component={NavLink} />\r\n                <Tab label=\"Minting Page\" to=\"/MintingPage\" component={NavLink} />\r\n                <Tab label=\"Settings\" to=\"/Settings\" component={NavLink} /> */}\r\n                <Tab label=\"Ticket\" to=\"/Ticket\" component={NavLink} />\r\n                <Tab label=\"Community\" to=\"/Community\" component={NavLink} />\r\n                <Tab label=\"About\" to=\"/\" component={NavLink} />\r\n                {/* <Tab label=\"Item Five\" to=\"/\" component={Link} />\r\n                <Tab label=\"Item Six\" to=\"/\" component={Link} />\r\n                <Tab label=\"Item Seven\" to=\"/\" component={Link} /> */}\r\n            </Tabs>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\n// {/* <Tabs\r\n//   orientation=\"vertical\"\r\n//   variant=\"scrollable\"\r\n//   value={value}\r\n//   onChange={handleChange}\r\n//   aria-label=\"Vertical tabs example\"\r\n//   sx={{ borderRight: 1, borderColor: \"divider\" }}\r\n// >\r\n//   <Tab label='Wallet' to='/' component={Link} />\r\n//   <Tab label=\"Item One\" />\r\n//   <Tab label=\"Item Two\" />\r\n//   <Tab label=\"Item Three\" />\r\n//   <Tab label=\"Item Four\" />\r\n//   <Tab label=\"Item Five\" />\r\n//   <Tab label=\"Item Six\" />\r\n//   <Tab label=\"Item Seven\" />\r\n// </Tabs> */}","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Toolbar from '@mui/material/Toolbar';\r\n\r\nimport SideNav from './SideNav';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\r\n\r\nimport Logo from './worldticket_logo_.png'\r\nconst drawerWidth = 240;\r\n\r\n// const StateMap = {\r\n//   'CreateCollection': 0,\r\n//   'CreateNFT': 1,\r\n//   'ManageNFT': 2,\r\n//   'MintingPage': 3,\r\n//   'Settings': 4,\r\n//   '': 5,\r\n// }\r\n\r\nconst StateMap = {\r\n \r\n  'Ticket': 0,\r\n  'Community': 1,\r\n  '': 2,\r\n}\r\n\r\n\r\nexport default function ResponsiveDrawer() {\r\n\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const location = useLocation()\r\n  // console.log(location)\r\n\r\n  let result = location.pathname.split('/');\r\n  // console.log(result);\r\n\r\n  // 현재 어떤 탭에 있는지 알려주는 state\r\n  const [value, setValue] = React.useState(StateMap[result[1]]);\r\n\r\n  const handleChange = (_, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  return (\r\n    <Box >\r\n      {/* <CssBaseline /> */}\r\n      {/* <Box> */}\r\n\r\n      <AppBar\r\n        // position=\"fixed\"\r\n        sx={{\r\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\r\n          ml: { sm: `${drawerWidth}px` },\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2, display: { sm: 'none' } }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          {/* <Typography variant=\"h5\" noWrap component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Minter Lab\r\n          </Typography> */}\r\n          <img src={Logo} alt=\"logo\" width=\"180\" height=\"30\" />\r\n          <Box sx={{ flexGrow: 2 }} >\r\n\r\n            {/* <CollectionSelect  /> */}\r\n          </Box>\r\n          <Box sx={{ flexGrow: 1 }} >\r\n\r\n            \r\n          </Box>\r\n          {/* <ConnectButton /> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* </Box> */}\r\n      <Box\r\n        component=\"nav\"\r\n        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\r\n        aria-label=\"mailbox folders\"\r\n      >\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Drawer\r\n          // container={container}\r\n          variant=\"temporary\"\r\n          open={mobileOpen}\r\n          onClose={handleDrawerToggle}\r\n          ModalProps={{\r\n            keepMounted: true, // Better open performance on mobile.\r\n          }}\r\n          sx={{\r\n            display: { xs: 'block', sm: 'none' },\r\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n          }}\r\n        >\r\n          <SideNav value={value} handleChange={handleChange} />\r\n        </Drawer>\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          sx={{\r\n            display: { xs: 'none', sm: 'block' },\r\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n          }}\r\n          open\r\n        >\r\n          <SideNav value={value} handleChange={handleChange} />\r\n        </Drawer>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { Box } from '@mui/material'\r\n\r\nimport { Container } from '@mui/system'\r\n\r\n// interface Props {\r\n//     children: React.ReactElement\r\n// }\r\n\r\nexport default function Home({ children }) {\r\n    // const isLoading = useMinterLabStore(state => state.isLoading)\r\n\r\n\r\n    // if (isLoading) {\r\n    //     return <Loading />\r\n    // }\r\n\r\n    return (\r\n        <Box\r\n            component=\"main\"\r\n            sx={{ flexGrow: 1, marginTop: 8, width: { sm: `calc(100% - ${240}px)` } }}\r\n\r\n            style={{\r\n\r\n                background: \"linear-gradient(#9A01FF,#DB02C6)\",\r\n                height: \"100vh\",\r\n            }}\r\n        >\r\n            <Container maxWidth=\"lg\">\r\n\r\n                {children}\r\n            </Container>\r\n        </Box>\r\n\r\n    )\r\n}","export  function About() {\r\n    console.log(\"About page loaded\")\r\n\r\n    return (\r\n        <div>\r\n            <h1>About</h1>\r\n        </div>\r\n    )\r\n}","export function NotFound() {\r\n  return (\r\n    <div>\r\n      <h1>404</h1>\r\n      <p>Page not found</p>\r\n      <p>Wrong URL</p>\r\n    </div>\r\n  )\r\n}","\r\nimport { NFTStorage, Blob } from \"nft.storage\";\r\n\r\n// 공유 계정 , minterlab , nft storage 공유 계졍 \r\n// const API_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweEJiNDRBZDUzODJEYjNiRDI5NzM2NkFDY2M4OTNBN0YxNGNjYkVDNjgiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY3NDAzNzQ1MTcyMiwibmFtZSI6Im1pbnRlci1sYWIifQ.0VBCGCisVmuydkVgTSFc1RFkkh8gkyQJMKAye5VvOYw\";\r\nconst API_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDEzYUUyRmYxRTViZTYyMEIyMjFmNzA3YjI5MzY5OEYzMTA0REIyNmYiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY3MzIzMzE3MjMxNiwibmFtZSI6InRlc3QifQ.W-z5b0Yl1JzwvX9xwKv4EOdfUKN8bzPGDbij4m7x4R8\"\r\n\r\nconst client = new NFTStorage({ token: API_KEY });\r\n\r\n// export async function ipfsUploadImage(files) {\r\n\r\n//   console.log(files)\r\n\r\n\r\n//   //   const directoryPath = dirName;\r\n//   //   const filesToUpload = filesFromPath(directoryPath, {\r\n//   //     pathPrefix: path.resolve(directoryPath), // see the note about pathPrefix below\r\n//   //     hidden: true, // use the default of false if you want to ignore files that start with '.'\r\n//   //   })\r\n\r\n//   // 이것도 그냥 , store 로 하면 뒤에 파일명 안 붙는거 아닌가 ???\r\n//   const cid = await client.storeDirectory(files)\r\n//   console.log({ cid })\r\n\r\n//   const status = await client.status(cid)\r\n//   console.log(status)\r\n//   return status.cid;\r\n// }\r\n\r\n\r\n\r\nexport async function ipfsUploadImage(files) {\r\n\r\n  // console.log(files)\r\n\r\n  // const cid = await client.storeDirectory(files)\r\n  // console.log({ cid })\r\n\r\n  // const arrayBuffer = reader.result;\r\n  const blob = new Blob([files[0]]);\r\n\r\n  const cid = await client.storeBlob(blob)\r\n  console.log(cid)\r\n\r\n  const status = await client.status(cid)\r\n  console.log(status)\r\n  return status.cid;\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport async function ipfsUploadMetadata(metadata) {\r\n\r\n  console.log(metadata);\r\n\r\n\r\n  // const content = new Blob(Buffer.from(metadata));\r\n\r\n\r\n  const blob = new Blob([JSON.stringify(metadata)], { type: 'text/json' });\r\n  const cid = await client.storeBlob(blob);\r\n  console.log(cid);\r\n\r\n\r\n  // const content = new Blob(JSON.stringify(metadata));\r\n  // const cid = await client.store(metadata);\r\n  // console.log(cid);\r\n\r\n  const status = await client.status(cid)\r\n  console.log(status)\r\n  return status.cid;\r\n}","// import { WorldIDWidget } from '@worldcoin/id'\r\nimport { IDKitWidget, solidityEncode, internal } from '@worldcoin/idkit'\r\nimport { ipfsUploadMetadata } from '../utils/ipfsUpload';\r\nimport { useState } from 'react';\r\n\r\nimport Stage from './stage.png'\r\nimport { Button, Divider, Grid, Paper, TextField } from '@mui/material';\r\nimport { useAccount, useSigner } from 'wagmi';\r\n\r\nimport EthSeoulABI from '../contracts/eth_seoul/metadata.json'\r\nimport { ethers } from 'ethers';\r\n\r\nimport { defaultAbiCoder as abi } from 'ethers/lib/utils'\r\n\r\nimport \"./ticket.css\"\r\n\r\nconst decode = (type, encodedString) => {\r\n    return abi.decode([type], encodedString)[0]\r\n}\r\n\r\n\r\n\r\nconsole.log(EthSeoulABI)\r\n\r\n\r\n\r\n// import { AuthProvider } from 'oidc-react';\r\n\r\n// const oidcConfig = {\r\n//     onSignIn: () => {\r\n//         // Redirect?\r\n//         console.log(\"onSignIn\")\r\n//     },\r\n//     authority: 'https://id.worldcoin.org/authorize',\r\n//     clientId: 'app_staging_aae9965dbbbefb6b7cfa1579bc0ed4bf',\r\n//     clientSecret: 'sk_03f8ca8dc7ffc4db5bab6bc2b09a54f142f5b096c6265751',\r\n//     redirectUri: '/ticket',\r\n//     responseType:\"id_token\"\r\n// };\r\n\r\n\r\nexport function Ticket() {\r\n\r\n    const { data: signer, isError, isLoading } = useSigner();\r\n\r\n    const account = useAccount()\r\n\r\n\r\n    console.log(\"Ticket page loaded\")\r\n    const [seatSelection, setSeatSelection] = useState(0);\r\n    const [price, setPrice] = useState(0);\r\n\r\n    const [confirmSeat, setConfirmSeat] = useState(\"\")\r\n    // just multiply seatselection with 1000 as a price lol\r\n    // insert number of seat selection as Textfield\r\n\r\n    // const [value, setValue] = useState('');\r\n\r\n    const [ticketTokenURI, setTokenURI] = useState('')\r\n\r\n    const handleChange = (event) => {\r\n        setSeatSelection(event.target.value);\r\n    };\r\n\r\n    async function uploadToIPFS() {\r\n        const metadataForUpload = {\r\n            name: \"Blackpink Eth Seoul\",\r\n            description: \"Blackpink concert ticket for Eth Seoul\",\r\n            image: \"https://bafybeihciagprcgx3iotgws5ctawk2a5p53dlowruclnjpg2if2h6whpym.ipfs.nftstorage.link/wolrdticket_logo_icon_design.png\",\r\n            seatSelection: seatSelection,\r\n            price: price,\r\n            concertArtist: \"BlackPink\",\r\n            concertStartsAt: 1677740800000\r\n        }\r\n        const tokenURI = await ipfsUploadMetadata(metadataForUpload);\r\n        const tokenURL = `https://${tokenURI}.ipfs.nftstorage.link`;\r\n        // console.log(\"NFT IPFS upload is completed, NFT is stored at : \", `https://ipfs.io/ipfs/${tokenURI}`);\r\n        console.log(\"NFT IPFS upload is completed, NFT is stored at : \", tokenURL);\r\n\r\n\r\n        setTokenURI(tokenURL)\r\n        setPrice(Math.floor(33 * 1000 / seatSelection));\r\n\r\n        setConfirmSeat(seatSelection)\r\n    }\r\n\r\n    async function onSuccess(response) {\r\n        console.log('response', response)\r\n\r\n        console.log(\"enter the concert\")\r\n\r\n        const worldTicketAddress = \"0x1c3aDb05b8a51ec6D941cC266E72a62964D94bC2\";\r\n\r\n        const worldTicketContract = new ethers.Contract(worldTicketAddress, EthSeoulABI.abi, signer);\r\n\r\n        const contractWithSigner = worldTicketContract.connect(signer)\r\n\r\n        const unpackedProof = ethers.utils.defaultAbiCoder.decode(['uint256[8]'], response.proof)[0]\r\n        const decodedMerkleRoot = decode(\"uint256\", response.merkle_root)\r\n        const decodedNullifierHash = decode(\"uint256\", response.nullifier_hash)\r\n\r\n        const gasEstimated = await worldTicketContract.estimateGas.mint(account.address, decodedMerkleRoot, decodedNullifierHash, unpackedProof, account.address)\r\n        console.log(\"gasEstimated\", gasEstimated)\r\n\r\n        const tx = await contractWithSigner.mint(account.address, decodedMerkleRoot, decodedNullifierHash, unpackedProof, account.address, { gasLimit: \"1000000\" })\r\n        const rc = await tx.wait()\r\n\r\n        console.log(tx);\r\n        console.log(rc);\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <Grid container spacing={2}>\r\n            <Grid item lg={8} xs={12}>\r\n                <img width={600} height={600} src={Stage} alt=\"stage\" />\r\n            </Grid>\r\n            <Grid item lg={4} xs={12}>\r\n\r\n                <div\r\n                    // elevation={3} \r\n                    style={{\r\n                        padding: 20,\r\n                        margin: 20,\r\n                        // opacity: 0.3,\r\n                        // backgroundColor: \"#000000\",\r\n                    }}\r\n                >\r\n\r\n                    <h2>Seat Selection</h2>\r\n                    <TextField\r\n                        id=\"seatSelection\"\r\n                        label=\"Seat\"\r\n                        variant=\"outlined\"\r\n                        value={seatSelection}\r\n                        onChange={handleChange}\r\n                        color='success'\r\n                        fullWidth\r\n                    />\r\n                    <div>\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                marginTop: 20\r\n                            }}\r\n                        >\r\n                            <div></div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color='success'\r\n                                onClick={uploadToIPFS}\r\n                                sx={\r\n                                    {\r\n                                        fontWeight: 'bold',\r\n                                    }\r\n                                }\r\n                            >\r\n                                Enter\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <h2>Your Ticket Price</h2>\r\n                    <Divider variant=\"middle\" />\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                            // marginTop: 20\r\n                        }}\r\n                    >\r\n                        <h2>Sec {confirmSeat}</h2>\r\n                        <h2>${price}</h2>\r\n                    </div>\r\n\r\n                    <Divider variant=\"middle\" />\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                            marginTop: 20\r\n                        }}\r\n                    >\r\n                        <div></div>\r\n                        <IDKitWidget\r\n                            app_id=\"app_staging_fd34682d9ee03c5ce1511ae8d6c69330\" // obtained from the Developer Portal\r\n                            action=\"stag-ticket\" // this is your action identifier from the Developer Portal (can also be created on the fly)\r\n                            signal={solidityEncode(['address'], [account.address])} // any arbitrary value the user is committing to, e.g. for a voting app this could be the vote\r\n                            onSuccess={onSuccess}\r\n                            credential_types={['orb']} // the credentials you want to accept\r\n                            // walletConnectProjectId=\"get_this_from_walletconnect_portal\" // optional, obtain from WalletConnect Portal\r\n                            enableTelemetry\r\n                        >\r\n                            {({ open }) => <Button\r\n                                variant=\"contained\"\r\n                                color='success'\r\n                                onClick={open}\r\n                                sx={\r\n                                    {\r\n                                        fontWeight: 'bold',\r\n                                    }\r\n                                }\r\n                            >\r\n                                Buy Now!\r\n                            </Button>}\r\n                        </IDKitWidget>\r\n\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n\r\n        </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}","export  function Community() {\r\n    console.log(\"Community page loaded\")\r\n\r\n    return (\r\n        <div>\r\n            <h1>Community</h1>\r\n        </div>\r\n    )\r\n}","import React, {  useLayoutEffect } from 'react'\r\nimport { Routes, Route, useNavigate } from 'react-router-dom'\r\n\r\n\r\nimport {  About, NotFound, Community,Ticket } from './pages'\r\n\r\n\r\nexport default function MyRoutes() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // useLayoutEffect(() => {\r\n    //     if (typeof window.ethereum === \"undefined\") {\r\n    //         console.log(\"let's install metamask\")\r\n    //         navigate(\"/MetamaskInstall\");\r\n    //         // window.history.push(\"/install-metamask\")\r\n    //     }\r\n    // }, [navigate]);\r\n\r\n    return (\r\n        <Routes base>\r\n            {/* <Route exact path={`/CreateCollection`} element={<CreateCollection />} /> */}\r\n            {/* <Route exact path={`/CreateNFT`} element={<CreateNFT />} />\r\n            <Route exact path={`/ManageNFT`} element={<ManageNFT />} />\r\n            <Route path={`/MintingPage/:chainId/:contract1155Address`} element={<MintingPage />} />\r\n            <Route path={`/MintingPage`} element={<MintingPage />} />\r\n            <Route  path={`/MetamaskInstall`} element={<MetamaskInstall />} />\r\n            <Route exact path={`/Settings`} element={<Settings />} /> */}\r\n            <Route exact path={`/Ticket`} element={<Ticket />} />\r\n            <Route exact path={`/Community`} element={<Community />} />\r\n            <Route exact path={`/`} element={<About />} />\r\n            <Route path={`*`} element={<NotFound />} />\r\n            {/* <Route path={`/`} element={<Home />} /> */}\r\n        </Routes>\r\n    )\r\n}\r\n\r\n// function Home() {\r\n//     return (\r\n//         <div>\r\n//             hello home\r\n//         </div>\r\n//     )\r\n// }","import React, { useEffect } from 'react'\r\nimport { Routes, Route, HashRouter, useNavigate } from 'react-router-dom'\r\nimport AppBar from './components/AppBar'\r\nimport MainContainer from './components/MainContainer'\r\n\r\nimport { ManageNFT, CreateNFT, MintingPage, Settings, About, NotFound, MetamaskInstall } from './pages'\r\n// console.log(process.env.PUBLIC_URL);\r\n//basename={process.env.PUBLIC_URL}\r\nimport MyRoutes from './routes'\r\n\r\nimport Gradient from './components/Gradient'\r\nexport default function Router() {\r\n\r\n  \r\n\r\n    return (\r\n        <HashRouter >\r\n            {/* <Gradient /> */}\r\n            <AppBar />\r\n            <MainContainer>\r\n                \r\n\r\n                    <MyRoutes />\r\n               \r\n            </MainContainer>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\n// function Home() {\r\n//     return (\r\n//         <div>\r\n//             hello home\r\n//         </div>\r\n//     )\r\n// }"],"names":["SideNav","value","handleChange","Toolbar","Divider","Tabs","orientation","variant","onChange","sx","borderRight","borderColor","Tab","label","to","component","NavLink","drawerWidth","StateMap","ResponsiveDrawer","React","mobileOpen","setMobileOpen","result","useLocation","pathname","split","setValue","_","newValue","handleDrawerToggle","Box","AppBar","width","sm","ml","IconButton","color","edge","onClick","mr","display","Menu","src","Logo","alt","height","flexGrow","flexShrink","Drawer","open","onClose","ModalProps","keepMounted","xs","boxSizing","Home","children","marginTop","style","background","Container","maxWidth","About","console","log","NotFound","client","NFTStorage","token","ipfsUploadMetadata","metadata","blob","Blob","JSON","stringify","type","storeBlob","cid","status","decode","encodedString","abi","Ticket","useSigner","signer","data","account","isError","isLoading","useAccount","useState","seatSelection","setSeatSelection","price","setPrice","confirmSeat","setConfirmSeat","setTokenURI","metadataForUpload","name","description","image","concertArtist","concertStartsAt","tokenURI","tokenURL","Math","floor","response","worldTicketContract","ethers","EthSeoulABI","contractWithSigner","connect","unpackedProof","proof","decodedMerkleRoot","merkle_root","decodedNullifierHash","nullifier_hash","estimateGas","mint","address","gasEstimated","gasLimit","tx","wait","rc","Grid","container","spacing","item","lg","Stage","padding","margin","TextField","id","event","target","fullWidth","justifyContent","Button","fontWeight","app_id","action","signal","solidityEncode","onSuccess","credential_types","enableTelemetry","Community","MyRoutes","useNavigate","base","exact","path","element","Router"],"sourceRoot":""}